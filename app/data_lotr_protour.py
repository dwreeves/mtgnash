# ruff: noqa: E501
import numpy as np
import pandas as pd


matchup_dict = {
    "Rakdos Evoke": [(1, 0, 1), (12, 2, 23), (29, 2, 20), (13, 0, 19), (27, 0, 11), (18, 0, 13), (19, 0, 11), (2, 0, 7), (5, 0, 9), (7, 0, 7), (11, 0, 5), (6, 0, 4), (5, 0, 3), (9, 0, 5), (6, 0, 2), (5, 0, 6), (4, 0, 2), (3, 0, 5), (3, 0, 0)],
    "Four-Color Omnath": [(23, 2, 12), (1, 0, 1), (4, 0, 15), (8, 0, 11), (7, 0, 8), (7, 0, 7), (4, 0, 8), (3, 0, 4), (6, 0, 6), (5, 0, 3), (1, 0, 6), (2, 0, 4), (2, 0, 1), (0, 1, 4), (3, 0, 2), (1, 0, 6), (1, 0, 0), (1, 1, 2), (0, 0, 3)],
    "Mono-Green Tron": [(20, 2, 29), (15, 0, 4), (1, 0, 1), (11, 1, 7), (8, 0, 5), (7, 0, 4), (7, 0, 2), (3, 0, 7), (3, 0, 2), (1, 0, 4), (4, 0, 1), (4, 0, 2), (0, 0, 0), (1, 1, 0), (0, 0, 2), (0, 0, 3), (0, 0, 4), (1, 0, 2), (0, 0, 2)],
    "Temur Rhinos": [(19, 0, 13), (11, 0, 8), (7, 1, 11), (1, 0, 1), (4, 0, 3), (4, 0, 1), (1, 0, 7), (5, 0, 0), (3, 0, 2), (1, 0, 1), (4, 0, 2), (3, 0, 1), (0, 1, 1), (2, 0, 3), (1, 0, 0), (2, 0, 0), (0, 0, 1), (0, 0, 0), (2, 0, 0)],
    "Golgari Yawgmoth": [(11, 0, 27), (8, 0, 7), (5, 0, 8), (3, 0, 4), (1, 0, 1), (3, 0, 6), (1, 0, 6), (2, 0, 4), (1, 0, 3), (3, 0, 0), (1, 0, 0), (3, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 1), (2, 0, 1), (1, 0, 1), (0, 0, 1), (0, 0, 1)],
    "Dimir Control": [(13, 0, 18), (7, 0, 7), (4, 0, 7), (1, 0, 4), (6, 0, 3), (1, 0, 1), (3, 0, 0), (3, 0, 1), (0, 0, 2), (1, 0, 1), (1, 0, 1), (1, 0, 2), (3, 0, 1), (1, 0, 1), (1, 0, 1), (0, 0, 1), (1, 0, 1), (1, 0, 1), (0, 0, 0)],
    "Living End": [(11, 0, 19), (8, 0, 4), (2, 0, 7), (7, 0, 1), (6, 0, 1), (0, 0, 3), (1, 0, 1), (3, 0, 1), (0, 0, 4), (0, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 1), (0, 0, 0), (1, 0, 1), (1, 0, 0), (0, 0, 1), (0, 0, 0)],
    "Boros Burn": [(7, 0, 2), (4, 0, 3), (7, 0, 3), (0, 0, 5), (4, 0, 2), (1, 0, 3), (1, 0, 3), (1, 0, 1), (2, 0, 1), (0, 0, 1), (3, 0, 2), (1, 0, 2), (0, 0, 1), (0, 0, 1), (0, 0, 2), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Four-Color Rhinos": [(9, 0, 5), (6, 0, 6), (2, 0, 3), (2, 0, 3), (3, 0, 1), (2, 0, 0), (4, 0, 0), (1, 0, 2), (1, 0, 1), (2, 0, 0), (1, 0, 4), (1, 0, 0), (0, 0, 1), (2, 0, 1), (0, 0, 2), (0, 0, 0), (1, 0, 0), (1, 0, 1), (0, 0, 1)],
    "Izzet Murktide": [(7, 0, 7), (3, 0, 5), (4, 0, 1), (1, 0, 1), (0, 0, 3), (1, 0, 1), (1, 0, 1), (1, 0, 0), (0, 0, 2), (0, 0, 0), (0, 0, 2), (0, 0, 0), (1, 0, 2), (1, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (1, 0, 1)],
    "Five-Color Creativity": [(5, 0, 11), (6, 0, 1), (1, 0, 4), (2, 0, 4), (0, 0, 1), (1, 0, 1), (0, 0, 1), (2, 0, 3), (4, 0, 1), (2, 0, 0), (0, 0, 0), (3, 0, 1), (1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Jeskai Breach": [(4, 0, 6), (4, 0, 2), (2, 0, 4), (1, 0, 3), (0, 0, 3), (2, 0, 1), (1, 0, 0), (2, 0, 1), (0, 0, 1), (1, 0, 1), (1, 0, 3), (0, 0, 0), (0, 0, 1), (0, 0, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Esper Control": [(3, 0, 5), (1, 0, 2), (0, 0, 0), (1, 1, 0), (0, 0, 2), (1, 0, 3), (0, 0, 0), (1, 0, 0), (1, 0, 0), (2, 0, 1), (0, 0, 1), (1, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 1), (1, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 1)],
    "Four-color Control": [(5, 0, 9), (4, 1, 0), (0, 1, 1), (3, 0, 2), (0, 0, 2), (1, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 2), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 0, 0), (1, 0, 0)],
    "Samwise Gamgee Combo": [(2, 0, 6), (2, 0, 3), (2, 0, 0), (0, 0, 1), (1, 0, 2), (1, 0, 1), (0, 0, 0), (2, 0, 0), (2, 0, 0), (0, 0, 1), (1, 0, 0), (1, 0, 1), (1, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Amulet Titan": [(6, 0, 5), (6, 0, 1), (3, 0, 0), (0, 0, 2), (1, 0, 2), (1, 0, 0), (1, 0, 1), (1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 1), (0, 0, 0), (1, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Mono-Black Coffers": [(2, 0, 4), (0, 0, 1), (4, 0, 3), (1, 0, 0), (1, 0, 1), (1, 0, 1), (0, 0, 1), (0, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 2), (0, 0, 0)],
    "Azorius Hammer": [(5, 0, 3), (2, 1, 1), (2, 0, 1), (0, 0, 0), (1, 0, 0), (1, 0, 1), (1, 0, 0), (0, 0, 0), (1, 0, 1), (0, 1, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (2, 0, 0), (0, 0, 0), (0, 0, 0)],
    "Dimir Mill": [(0, 0, 3), (3, 0, 0), (2, 0, 0), (0, 0, 2), (1, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (1, 0, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
}

deck_names = [k for k in matchup_dict]


# Actually match count ¯\_(ツ)_/¯ Oh well, what can ya do.
deck_count = pd.Series(
    {k: sum(sum(i) for i in v) for k, v in matchup_dict.items()},
    index=pd.Index(deck_names, name="deck")
)

# Add beta(5, 5) prior
matchup_dict_regularized = {
    k: [(i + 5, j, k + 5) for i, j, k in v]
    for k, v
    in matchup_dict.items()
}

payoff_matrix = pd.DataFrame(
    {
        k: [k / (i + k) for i, j, k in v]
        for k, v
        in matchup_dict_regularized.items()
    },
    index=pd.Index(deck_names, name="deck"),
    columns=pd.Index(deck_names, name="deck")
)

# Filter things
# --------------------

exclude_me = [
    "Izzet Murktide",
    "Five-Color Creativity",
    "Jeskai Breach",
    "Esper Control",
    "Four-color Control",
    "Samwise Gamgee Combo",
    "Amulet Titan",
    "Mono-Black Coffers",
    "Azorius Hammer",
    "Dimir Mill"
]

deck_count.drop(index=exclude_me, inplace=True)
payoff_matrix.drop(columns=exclude_me, inplace=True)
payoff_matrix.drop(index=exclude_me, inplace=True)

# Data quality control
# --------------------

assert payoff_matrix.sum().sum() == payoff_matrix.shape[0] ** 2 / 2

for i in payoff_matrix.columns:
    for j in payoff_matrix.columns:
        if i == j:
            assert payoff_matrix.loc[i, j] == 0.5, payoff_matrix.loc[[i, j], [i, j]]
        else:
            assert np.isclose(
                payoff_matrix.loc[i, j],
                1 - payoff_matrix.loc[j, i]
            ), payoff_matrix.loc[[i, j], [i, j]]
